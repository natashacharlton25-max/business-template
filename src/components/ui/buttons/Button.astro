---
export interface Props {
  variant?: 'primary' | 'secondary' | 'accent1' | 'accent2' | 'accent3' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  class?: string;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  disabled = false,
  class: className = '',
  ...rest
} = Astro.props;

const baseClasses = 'btn';
const variantClasses = {
  primary: 'btn-primary',
  secondary: 'btn-secondary',
  accent1: 'btn-accent1',
  accent2: 'btn-accent2',
  accent3: 'btn-accent3',
  outline: 'btn-outline',
  ghost: 'btn-ghost'
};
const sizeClasses = {
  sm: 'btn-sm',
  md: '',
  lg: 'btn-lg'
};

const classes = [
  baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  className
].filter(Boolean).join(' ');

const Element = href ? 'a' : 'button';
---

<Element
  class={classes}
  href={href}
  type={href ? undefined : type}
  disabled={href ? undefined : disabled}
  {...rest}
>
  <slot />
</Element>

<style>
  /* Additional button variants */
  .btn-outline {
    background: transparent;
    color: var(--color-primary);
    border: 2px solid var(--color-primary);
  }

  .btn-outline:hover {
    background: var(--color-primary);
    color: var(--color-white);
  }

  .btn-ghost {
    background: transparent;
    color: var(--color-primary);
    border: none;
  }

  .btn-ghost:hover {
    background: var(--color-gray-100);
    color: var(--color-secondary);
  }

  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }

  /* Focus states */
  .btn:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }
</style>